import random
import asyncio
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# üîê –¢–æ–∫–µ–Ω –æ—Ç BotFather
TOKEN = "7923343199:AAEwlBEeao_UjO3m4jiNZegsP2olsqTwTbg"

# üõ°Ô∏è Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CHAT_ID = 756605376

# –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
users = []
teams = []

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
tasks = [
    "–û–±—â–∞–π—Å—è —Ç–æ–ª—å–∫–æ –≥–ª–∞—Å–Ω—ã–º–∏.",
    "–û–±—â–∞–π—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–Ω—ã–º–∏.",
    "–ü–µ—Ä–µ–º–µ—â–∞–π—Å—è –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–≥–µ.",
    "–ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π —Ä–æ—Ç ‚Äî –≥—É–±—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–º–∫–Ω—É—Ç—ã.",
    "–û–±—â–∞–π—Å—è —à–µ–ø–æ—Ç–æ–º.",
    "–û–±—ä—è—Å–Ω—è–π—Å—è —Ç–æ–ª—å–∫–æ –∂–µ—Å—Ç–∞–º–∏.",
    "–ö–∞–∂–¥—É—é —Ñ—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–π —Å–æ —Å–ª–æ–≤–∞ ¬´–ø—É–ø–æ—á–∫–∏-–ø—É–ø–æ—á–∫–∏!¬ª.",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –∏–∑ –ø–µ—Å–µ–Ω.",
    "–ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
    "–û–±—â–∞–π—Å—è –≤ —Ä–∏—Ñ–º—É.",
    "–ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ü–µ–Ω—Ç —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–∞.",
    "–û–±—â–∞–π—Å—è —Ç–æ–ª—å–∫–æ –º–µ–º–∞–º–∏.",
    "–î–≤–∏–≥–∞–π—Å—è —Ç–∞–Ω—Ü—É—è, –ø–æ–∫–∞ –∏—â–µ—à—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
    "–ì–æ–≤–æ—Ä–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏–∑ —Ñ–∏–ª—å–º–æ–≤.",
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –Ω–∞ ¬´–°¬ª.",
	"–í –∫–∞–∂–¥–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–æ '–®–∫–æ–ª–∞'"
]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
NAME, NICK, TRIBE = range(3)

# –°—Ç–∞—Ä—Ç ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    return NAME

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∏–∫
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–≤–æ–π –Ω–∏–∫?", reply_markup=ReplyKeyboardRemove())
    return NICK

# –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–∞–π–± –∫–Ω–æ–ø–∫–∞–º–∏
async def get_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nick"] = update.message.text

    keyboard = [
        [
            InlineKeyboardButton("ü¶é –ê–∫—Å–æ–ª–æ—Ç–ª–∏", callback_data="tribe_–ê–∫—Å–æ–ª–æ—Ç–ª–∏"),
            InlineKeyboardButton("üêõ –¢–∏—Ö–æ—Ö–æ–¥–∫–∏", callback_data="tribe_–¢–∏—Ö–æ—Ö–æ–¥–∫–∏")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üéØ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç—Ä–∞–π–±:",
        reply_markup=reply_markup
    )
    return TRIBE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–π–±–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
async def tribe_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    tribe = query.data.replace("tribe_", "")
    context.user_data["tribe"] = tribe

    users.append({
        "chat_id": query.message.chat.id,
        "name": context.user_data["name"],
        "nick": context.user_data["nick"],
        "tribe": tribe
    })

    tribe_emoji = "ü¶é" if tribe == "–ê–∫—Å–æ–ª–æ—Ç–ª–∏" else "üêõ"

    await query.edit_message_text(
        f"‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {tribe_emoji} <b>{tribe}</b>!\n\n"
        "‚è≥ –ñ–¥–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        parse_mode='HTML'
    )
    return ConversationHandler.END

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
def create_teams():
    global users, teams
    axolotls = [u for u in users if u['tribe'] == '–ê–∫—Å–æ–ª–æ—Ç–ª–∏']
    tardigrades = [u for u in users if u['tribe'] == '–¢–∏—Ö–æ—Ö–æ–¥–∫–∏']
    random.shuffle(axolotls)
    random.shuffle(tardigrades)

    teams.clear()
    team_number = 1
    while len(axolotls) >= 3 and len(tardigrades) >= 3:
        team = [axolotls.pop(), axolotls.pop(), axolotls.pop(), 
                tardigrades.pop(), tardigrades.pop(), tardigrades.pop()]
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∫ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        for member in team:
            member['team_number'] = team_number
        teams.append(team)
        team_number += 1

# –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–¥–∞–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥
async def notify_teams(application):
    for team in teams:
        team_description = "\n".join(
            [f"{'ü¶é' if member['tribe'] == '–ê–∫—Å–æ–ª–æ—Ç–ª–∏' else 'üêõ'} {member['name']} ‚Äì {member['nick']} ‚Äì {member['tribe']}" for member in team]
        )
        for member in team:
            task = random.choice(tasks)
            message = (
                f"üéâ <b>–¢–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ #{member['team_number']}:</b>\n{team_description}\n\n"
                f"üéØ <b>–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É —Ç–µ–±—è –µ—Å—Ç—å —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ:</b> {task}"
            )
            await application.bot.send_message(chat_id=member['chat_id'], text=message, parse_mode='HTML')
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
            await asyncio.sleep(0.1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def split_message(text, max_length=4000):
    if len(text) <= max_length:
        return [text]
    
    parts = []
    current_part = ""
    lines = text.split('\n')
    
    for line in lines:
        if len(current_part) + len(line) + 1 <= max_length:
            current_part += line + '\n'
        else:
            if current_part:
                parts.append(current_part.strip())
            current_part = line + '\n'
    
    if current_part:
        parts.append(current_part.strip())
    
    return parts

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
async def start_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–¢—ã –Ω–µ –∞–¥–º–∏–Ω üôÉ, –∞–π!")
        return

    keyboard = [
        [InlineKeyboardButton("üöÄ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", callback_data="form_teams")],
        [InlineKeyboardButton("üë• –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="show_users")],
        [InlineKeyboardButton("üèÜ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", callback_data="show_teams")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö", callback_data="clear_users")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞
async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global users, teams
    query = update.callback_query
    await query.answer()

    if query.from_user.id != ADMIN_CHAT_ID:
        return

    if query.data == "form_teams":
        if len(users) < 6:
            await query.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 6 —á–µ–ª–æ–≤–µ–∫ (3 –∞–∫—Å–æ–ª–æ—Ç–ª—è + 3 —Ç–∏—Ö–æ—Ö–æ–¥–∫–∏).")
        else:
            create_teams()
            await notify_teams(context.application)
            await query.edit_message_text("–ö–æ–º–∞–Ω–¥—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞–¥–∞–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã!")
    
    elif query.data == "show_users":
        if not users:
            await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        else:
            user_list = "\n".join([
                f"{'ü¶é' if user['tribe'] == '–ê–∫—Å–æ–ª–æ—Ç–ª–∏' else 'üêõ'} {user['name']} (@{user['nick']}) - {user['tribe']}"
                for user in users
            ])
            
            message_parts = split_message(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(users)}):\n\n{user_list}")
            
            if len(message_parts) == 1:
                await query.edit_message_text(message_parts[0])
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π
                await query.edit_message_text(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(users)}):\n\n{message_parts[0]}")
                for i, part in enumerate(message_parts[1:], 1):
                    await context.application.bot.send_message(
                        chat_id=ADMIN_CHAT_ID, 
                        text=f"üìã –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({i+1}/{len(message_parts)}):\n\n{part}"
                    )
    
    elif query.data == "show_teams":
        if not teams:
            await query.edit_message_text("–ö–æ–º–∞–Ω–¥—ã –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            teams_info = []
            for i, team in enumerate(teams, 1):
                team_members = "\n".join([
                    f"  {'ü¶é' if member['tribe'] == '–ê–∫—Å–æ–ª–æ—Ç–ª–∏' else 'üêõ'} {member['name']} (@{member['nick']})"
                    for member in team
                ])
                teams_info.append(f"üèÜ <b>–ö–æ–º–∞–Ω–¥–∞ #{i}:</b>\n{team_members}")
            
            teams_text = "\n\n".join(teams_info)
            
            # –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
            team_members = []
            for team in teams:
                team_members.extend(team)
            
            remaining_users = [user for user in users if user not in team_members]
            
            if remaining_users:
                remaining_list = "\n".join([
                    f"{'ü¶é' if user['tribe'] == '–ê–∫—Å–æ–ª–æ—Ç–ª–∏' else 'üêõ'} {user['name']} (@{user['nick']}) - {user['tribe']}"
                    for user in remaining_users
                ])
                remaining_text = f"\n\nüë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã ({len(remaining_users)}):</b>\n{remaining_list}"
            else:
                remaining_text = "\n\n‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ –∫–æ–º–∞–Ω–¥–∞–º!"
            
            full_message = f"üèÜ <b>–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ({len(teams)}):</b>\n\n{teams_text}{remaining_text}"
            
            message_parts = split_message(full_message)
            
            if len(message_parts) == 1:
                await query.edit_message_text(message_parts[0], parse_mode='HTML')
            else:
                await query.edit_message_text(message_parts[0], parse_mode='HTML')
                for i, part in enumerate(message_parts[1:], 1):
                    await context.application.bot.send_message(
                        chat_id=ADMIN_CHAT_ID, 
                        text=f"üèÜ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({i+1}/{len(message_parts)}):\n\n{part}",
                        parse_mode='HTML'
                    )
    
    elif query.data == "clear_users":
        users.clear()
        teams.clear()
        await query.edit_message_text("‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–¥–∞–ª–µ–Ω—ã!")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.error("Exception while handling an update:", exc_info=context.error)
        if "Conflict" in str(context.error):
            logger.info("Conflict detected, restarting bot...")
            await asyncio.sleep(5)
            await app.initialize()
            await app.start()
            await app.updater.start_polling()
    
    app.add_error_handler(error_handler)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nick)],
            TRIBE: [CallbackQueryHandler(tribe_chosen, pattern=r"^tribe_")],
        },
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start_admin", start_admin))
    app.add_handler(CallbackQueryHandler(admin_button_handler, pattern="^form_teams$|^show_users$|^show_teams$|^clear_users$"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    
    # –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        app.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        if "Conflict" in str(e):
            logger.info("Restarting due to conflict...")
            asyncio.sleep(5)
            main()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫

if __name__ == "__main__":
    main()
